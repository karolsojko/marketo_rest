<?php

/**
 * @file
 * Module functions for Marketo REST.
 */

define('MARKETO_REST_DATE_FORMAT', 'Y-m-d');

// API version and endpoints.
define('MARKETO_REST_API_VERSION', 'v1');
define('MARKETO_REST_IDENTITY_API', 'oauth/token');
define('MARKETO_REST_LEADS_API', 'leads.json');
define('MARKETO_REST_ACTIVITIES_API', 'activities.json');
define('MARKETO_REST_LEADS_DESCRIBE_API', 'leads/describe.json');
define('MARKETO_REST_ACTIVITIES_TYPES_API', 'activities/types.json');
define('MARKETO_REST_PAGING_TOKEN_API', 'activities/pagingtoken.json');

define('MARKETO_REST_PAGES', "admin\nadmin/*\nbatch\nnode/add*\nnode/*/*\nuser/*/*");
define('MARKETO_REST_TRACKING_METHOD_DEFAULT', 'munchkin');
define('MARKETO_REST_WEBFORM_FIELD_DEFAULTS', "firstName|First Name\nlastName|Last Name\nemail|Email Address");

define('MARKETO_REST_SCHEMA_WEBFORM', 'marketo_rest_webform');
define('MARKETO_REST_WEBFORM_FIELD_ACTIVE', 'is_active');
define('MARKETO_REST_WEBFORM_OPTIONS', 'options');

define('MARKETO_REST_SCHEMA_WEBFORM_COMPONENT', 'marketo_rest_webform_component');
define('MARKETO_REST_WEBFORM_COMPONENT_KEY', 'marketo_rest_key');
define('MARKETO_REST_WEBFORM_COMPONENT_NONE', 'none');

/**
 * Implements hook_menu().
 */
function marketo_rest_menu() {
  // Module settings.
  $items['admin/config/search/marketo_rest'] = array(
    'title' => 'Marketo REST',
    'description' => 'Marketo REST configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('marketo_rest_admin_settings_form'),
    'access arguments' => array('administer marketo'),
    'file' => 'includes/marketo_rest.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function marketo_rest_permission() {
  return array(
    'administer marketo' => array(
      'title' => t('Administer Marketo REST'),
      'description' => t('Configure Marketo settings such as page visibility and REST API endpoint'),
    ),
  );
}

/**
 * Implements hook_cron_queue_info().
 */
function marketo_rest_cron_queue_info() {
  $queues = array();
  $queues['marketo_rest_lead'] = array(
    'worker callback' => '_marketo_rest_associate_lead_rest',
    'time' => 30,
  );
  return $queues;
}

/**
 * Adds lead information to be captured.
 * 
 * @param string $email
 *   A valid email address for this lead
 * @param array $data
 *   Key value pairs of data to be associated with this lead
 * @param bool $merge
 *   If TRUE, $data will be merged if $email already exists else $data will
 *   be replaced
 * @param array $options
 *   Array of additional options to modify the behavior of lead synchronization
 * 
 * @return bool
 *   Returns TRUE upon completion
 */
function marketo_rest_add_lead($email, $data = array(), $merge = FALSE, $options = array()) {
  $options += array(
    'tracking_method' => 'default',
  );

  $marketo_rest_data = array();
  if (isset($_SESSION['marketo_rest_data'])) {
    $marketo_rest_data = $_SESSION['marketo_rest_data'];
  }

  if ($merge && array_key_exists($email, $marketo_rest_data)) {
    $marketo_rest_data[$email]['data'] = array_merge($marketo_rest_data[$email]['data'], $data);
  }
  else {
    $marketo_rest_data[$email]['data'] = $data;
  }
  $marketo_rest_data[$email]['email'] = $email;
  $marketo_rest_data[$email]['options'] = $options;

  // Check to see if there is a default lead source we should apply.
  $source = variable_get('marketo_rest_munchkin_lead_source');
  if (!array_key_exists('leadSource', $marketo_rest_data[$email]['data']) && $source !== '') {
    $marketo_rest_data[$email]['data']['leadSource'] = $source;
  }

  // If the user executing this method is anonymous or is actually the lead
  // being modified we will pass along the _mkto_trk cookie value so any
  // activity associated with the cookie gets merged to the lead.
  global $user;
  if (($user->uid == 0 || $user->mail == $email) && isset($_COOKIE['_mkto_trk'])) {
    $marketo_rest_data[$email]['marketoCookie'] = $_COOKIE['_mkto_trk'];
  }

  // Provide modules an opportunity to modify data.
  // hook_marketo_rest_lead_alter(&$data)
  drupal_alter('marketo_rest_lead', $marketo_rest_data[$email]);
  foreach ($marketo_rest_data[$email]['data'] as $key => $value) {
    // hook_marketo_rest_lead_firstname_alter(&$data)
    drupal_alter('marketo_rest_lead_' . $key, $marketo_rest_data[$email]['data'][$key]);
  }

  $_SESSION['marketo_rest_data'] = $marketo_rest_data;
  return TRUE;
}

/**
 * Retrieves queued data.
 */
function marketo_rest_get_queue() {
  // Data looks like $queue[email] = array(key => value).
  return (isset($_SESSION['marketo_rest_data'])) ? $_SESSION['marketo_rest_data'] : array();
}

/**
 * Cleanup any mess we made or data we don't want to hold on to.
 */
function _marketo_rest_cleanup() {
  if (isset($_SESSION['marketo_rest_data'])) {
    unset($_SESSION['marketo_rest_data']);
  }
}

/**
 * Implements hook_page_alter().
 */
function marketo_rest_page_alter(&$page) {
  global $user;
  $marketo_rest_data = marketo_rest_get_queue();

  if ((_marketo_rest_visibility_pages() && _marketo_rest_visibility_roles($user)) || count($marketo_rest_data) > 0) {

    /*
     * @todo handle case where visibility = false, count > 0, and
     * tracking type != munchkin.. we don't need any tracking in this case
     */
    // Basic Munchkin tracking.
    _marketo_rest_output_tracking_code();

    foreach ($marketo_rest_data as $lead) {
      if (array_key_exists('email', $lead)) {
        _marketo_rest_associate_lead($lead);
      }
    }

    _marketo_rest_cleanup();
  }
}

/**
 * Adds basic tracking code to page.
 */
function _marketo_rest_output_tracking_code() {
  if (_marketo_rest_munchkin_is_configured()) {
    $marketo_rest_munchkin_account_id = variable_get('marketo_rest_munchkin_account_id');
    $marketo_rest_munchkin_javascript_library = '//' . str_replace(array(
        'http://',
        'https://',
        '//'), '', variable_get('marketo_rest_munchkin_javascript_library'));

    drupal_add_js(array(
      'marketo_rest' => array(
        'track' => TRUE,
        'key' => $marketo_rest_munchkin_account_id,
        'library' => $marketo_rest_munchkin_javascript_library),
      ), 'setting');
  }
}

/**
 * Determines which tracking method should be used.
 * 
 * @param array $lead
 *   An associative array containing lead data
 *   - email: The email address of this lead
 *   - data: An associative array containing marketo fields and their values
 *     - firstName
 *     - lastName
 *   - marketoCookie: NULL or the value of $_COOKIE['_mkto_trk']
 *   - options: Array of options to modify the behavior of lead synchronization
 *     - tracking_method: 'default' or a string indicating which method to use
 *     - formid: Required when tracking_method is 'forms2'
 */
function _marketo_rest_associate_lead($lead) {
  $track = variable_get('marketo_rest_tracking_method');
  if (isset($lead['options']['tracking_method']) && $lead['options']['tracking_method'] != 'default') {
    $track = $lead['options']['tracking_method'];
  }
  switch ($track) {
    case 'munchkin':
      _marketo_rest_associate_lead_munchkin($lead);
      break;

    case 'forms2':
      if (isset($lead['options']['formid'])) {
        _marketo_rest_associate_lead_forms2($lead, $lead['options']['formid']);
      }
      break;

    case 'rest':
    default:
      _marketo_rest_associate_lead_rest($lead);
      break;
  }
}

/**
 * Adds javascript required to track a lead.
 * 
 * @param array $lead
 *   Lead data
 */
function _marketo_rest_associate_lead_munchkin($lead) {
  if (_marketo_rest_munchkin_is_configured()) {
    $key = variable_get('marketo_rest_munchkin_api_private_key', NULL);

    if (variable_get('marketo_rest_logging', FALSE)) {
      watchdog('marketo', 'Associating lead !email [@method] <pre>@data</pre>', array(
        '!email' => $lead['email'],
        '@method' => 'munchkin',
        '@data' => print_r($lead['data'], TRUE)), WATCHDOG_INFO);
    }
    /*
     * Using sha1 here rather than sha256 recommended by
     * http://drupal.org/node/845876 as this is a Marketo requirement.
     */
    $hash = hash('sha1', $key . $lead['email']);
    $action = array(
      'action' => 'associateLead',
      'data' => $lead['data'],
      'hash' => $hash,
    );
    drupal_add_js(array('marketo_rest' => array('actions' => array($action))), 'setting');
  }
}

/**
 * Captures lead data using the Forms 2.0 endpoint.
 * 
 * Reference: http://developers.marketo.com/documentation/websites/forms-2-0/
 *
 * @param array $lead
 *   Lead data
 */
function _marketo_rest_associate_lead_forms2($lead, $formid, $scheme = 'https', $path = '/index.php/leadCapture/save2') {
  if (_marketo_rest_forms2_is_configured()) {
    $url = $scheme . '://' . variable_get('marketo_rest_instance_host') . $path;

    $forms2 = array(
      'formid' => $formid,
      'formVid' => $formid,
      'munchkinId' => variable_get('marketo_rest_munchkin_account_id'),
    );
    $options = array(
      'method' => 'POST',
      'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
      'data' => drupal_http_build_query(array_merge($lead['data'], $forms2)),
    );

    $response = drupal_http_request($url, $options);

    if ($response->code == 200) {
      if (variable_get('marketo_rest_logging', FALSE)) {
        watchdog('marketo', 'Associating lead !email [forms2] <pre>@data</pre>', array(
          '!email' => $lead['email'],
          '@data' => print_r($lead['data'], TRUE)), WATCHDOG_INFO);
      }
    }
    else {
      watchdog('marketo', 'Unable to sync lead !email [forms2] <pre>@error</pre> Request: <pre>@request</pre> Response: <pre>@response</pre>', array(
          '!email' => $lead['email'],
          '@error' => $response->error,
          '@request' => $response->request,
          '@response' => $response->code . ' ' . $response->status_message,
          ), WATCHDOG_ERROR);
    }
  }
}

/**
 * Sends lead data using REST API.
 * 
 * @param array $lead
 *   Lead data
 * 
 * @throws Exception
 * @return \MarketoRestClient
 */
function _marketo_rest_associate_lead_rest($lead) {
  $client = null;

  if (_marketo_rest_rest_is_configured()) {
    module_load_include('inc', 'marketo_rest', 'includes/marketo_rest.rest');

    $client_secret = variable_get('marketo_rest_client_secret');
    $client_id = variable_get('marketo_rest_client_id');
    $rest_endpoint = variable_get('marketo_rest_endpoint');
    $rest_identity = variable_get('marketo_rest_identity');
    $rest_token = variable_get('marketo_rest_token');

    try {
      $rest_settings = _marketo_rest_rest_proxy_settings();
      $rest_settings['trace'] = variable_get('marketo_rest_logging', FALSE);
      $client = new MarketoRestClient($client_id, $client_secret, $rest_endpoint, $rest_identity);
      _marketo_rest_persist_access_token($client->getAccessToken($rest_token), $client->getAccessTokenExpiry());
      $input = (object) $lead['data'];
      $sync = $client->syncLead(array($input));
      if ($sync['success']) {
        if (variable_get('marketo_rest_logging', FALSE)) {
          watchdog('marketo', 'Associating lead !email [rest] <pre>@data @result</pre>', array(
            '!email' => $lead['email'],
            '@data' => print_r($lead['data'], TRUE),
            '@result' => print_r($sync['result'], TRUE),
            ), WATCHDOG_INFO);
        }
      }
      else {
        watchdog('marketo', 'Unable to sync lead !email [rest] <pre>@error</pre> Request XML: <pre>@request</pre> Response XML: <pre>@response</pre>', array(
          '!email' => $lead['email'],
          '@error' => $sync['result'],
          '@request' => $client->getLastRequest(),
          '@response' => $client->getLastResponse(),
          ), WATCHDOG_ERROR);
      }
    }
    catch (Exception $e) {
      watchdog('marketo', 'Unable to sync lead !email [rest] <pre>@error</pre>', array('!email' => $lead['email'], '@error' => $e->getMessage()), WATCHDOG_ERROR);
    }
  }
  return $client;
}

/**
 * Add a lead to the queue for submission later.
 * 
 * @param array $lead
 *   Lead data
 * 
 * @return bool
 *   Returns TRUE if lead was successfully added to queue
 */
function _marketo_rest_queue_lead($lead) {
  if (variable_get('marketo_rest_logging', FALSE)) {
    watchdog('marketo', 'Queuing lead !email [@method] <pre>@data</pre>', array(
      '!email' => $lead['email'],
      '@method' => 'queued',
      '@data' => print_r($lead['data'], TRUE)), WATCHDOG_INFO);
  }
  /* @var $queue SystemQueue */
  $queue = DrupalQueue::get('marketo_rest_lead', TRUE);
  $success = $queue->createItem($lead);
  return $success;
}

/**
 * Returns defined fields as an associative array useful for select options.
 * 
 * @return array
 *   Key/value pairs of defined Marketo fields
 */
function _marketo_rest_get_field_options($labels = TRUE, $sort = TRUE) {
  /*
   * marketo_rest_webform_fields is multi-line, pipe "|" delimited data
   * which needs to be parsed. First split it into rows of data.
   */
  $raw_options = preg_split('/(\r\n?|\n)/', trim(variable_get('marketo_rest_webform_fields', MARKETO_REST_WEBFORM_FIELD_DEFAULTS)));
  $options = array();

  // Loop over all the rows getting the keys and values for the fields.
  foreach ($raw_options as $row) {
    $field = explode('|', trim($row));
    if ($labels) {
      $options[trim($field[0])] = trim($field[1]) . ' (' . trim($field[0]) . ')';
    }
    else {
      $options[trim($field[0])] = trim($field[1]);
    }
  }
  if ($sort) {
    asort($options);
  }

  return $options;
}

/**
 * Retrieves fields from Marketo using REST API.
 * 
 * @return array
 *   Marketo fields
 */
function _marketo_rest_get_fields() {
  $result = array();
  if (_marketo_rest_rest_is_configured()) {
    module_load_include('inc', 'marketo_rest', 'includes/marketo_rest.rest');

    $client_secret = variable_get('marketo_rest_client_secret');
    $client_id = variable_get('marketo_rest_client_id');
    $rest_endpoint = variable_get('marketo_rest_endpoint');
    $rest_identity = variable_get('marketo_rest_identity');
    $rest_token = variable_get('marketo_rest_token');

    try {
      $client = new MarketoRestClient($client_id, $client_secret, $rest_endpoint, $rest_identity);
      _marketo_rest_persist_access_token($client->getAccessToken($rest_token), $client->getAccessTokenExpiry());
      $result = $client->getFields();
      if (!$result) {
        watchdog('marketo', 'Unable to retrieve field information. Please check REST API configuration', WATCHDOG_ERROR);
      }
    }
    catch (Exception $e) {
      watchdog('marketo', 'Unable to retrieve field information. <pre>@error</pre>', array('error' => $e->getMessage()), WATCHDOG_ERROR);
    }
  }

  return $result;
}

/**
 * Retrieves a lead from Marketo using REST API.
 *
 * @return array
 *   Marketo lead
 */
function marketo_rest_get_lead($key) {
  $result = array();
  if (_marketo_rest_rest_is_configured()) {
    module_load_include('inc', 'marketo_rest', 'includes/marketo_rest.rest');

    $client_secret = variable_get('marketo_rest_client_secret');
    $client_id = variable_get('marketo_rest_client_id');
    $rest_endpoint = variable_get('marketo_rest_endpoint');
    $rest_identity = variable_get('marketo_rest_endpoint');
    $rest_token = variable_get('marketo_rest_token');

    try {
      $client = new MarketoRestClient($client_id, $client_secret, $rest_endpoint, $rest_identity);
      _marketo_rest_persist_access_token($client->getAccessToken($rest_token), $client->getAccessTokenExpiry());
      $result = $client->getLead($key);
      if (!$result && variable_get('marketo_rest_logging', FALSE)) {
        watchdog('marketo', 'Lead data not found for !key', array('!key' => $key), WATCHDOG_INFO);
      }
    }
    catch (Exception $e) {
      watchdog('marketo', 'Unable to retrieve lead information. <pre>@error</pre>', array('error' => $e->getMessage()), WATCHDOG_ERROR);
    }
  }

  return $result;
}

/**
 * Retrieves lead activity from Marketo.
 *
 * @return array
 *   Marketo lead
 */
function marketo_rest_get_lead_activity($key) {
  $result = array();
  if (_marketo_rest_rest_is_configured()) {
    module_load_include('inc', 'marketo_rest', 'includes/marketo_rest.rest');

    $client_secret = variable_get('marketo_rest_client_secret');
    $client_id = variable_get('marketo_rest_client_id');
    $rest_endpoint = variable_get('marketo_rest_endpoint');
    $rest_identity = variable_get('marketo_rest_identity');
    $rest_token = variable_get('marketo_rest_token');

    try {
      $client = new MarketoRestClient($client_id, $client_secret, $rest_endpoint, $rest_identity);
      _marketo_rest_persist_access_token($client->getAccessToken($rest_token), $client->getAccessTokenExpiry());
      $result = $client->getAllLeadActivities($key);
      if (!$result && variable_get('marketo_rest_logging', FALSE)) {
        watchdog('marketo', 'Lead data not found for !key', array('!key' => $key), WATCHDOG_INFO);
      }
    }
    catch (Exception $e) {
      watchdog('marketo', 'Unable to retrieve lead activity. <pre>@error</pre>', array('error' => $e->getMessage()), WATCHDOG_ERROR);
    }
  }

  return $result;
}

/**
 * Tests to see if Marketo REST has a valid configuration.
 * 
 * @staticvar bool $configured
 * @return bool
 *   Returns TRUE if Munchkin settings are configured
 */
function _marketo_rest_is_configured() {
  static $configured;

  if (!isset($configured)) {
    $track = variable_get('marketo_rest_tracking_method');
    if (
      ($track == 'munchkin' & _marketo_rest_munchkin_is_configured()) ||
      ($track == 'rest' & _marketo_rest_rest_is_configured())
    ) {
      $configured = TRUE;
    }
    else {
      $configured = FALSE;
    }
  }

  return $configured;
}

/**
 * Tests to see if munchkin is configured.
 * 
 * @staticvar bool $configured
 * @return bool
 *   Returns TRUE if Munchkin settings are configured
 */
function _marketo_rest_munchkin_is_configured() {
  static $configured;

  if (!isset($configured)) {
    if (
      variable_get('marketo_rest_munchkin_account_id', FALSE) &&
      variable_get('marketo_rest_munchkin_api_private_key', FALSE) &&
      variable_get('marketo_rest_munchkin_javascript_library', FALSE)
    ) {
      $configured = TRUE;
    }
    else {
      $configured = FALSE;
    }
  }
  return $configured;
}

/**
 * Tests to see if forms2 is configured.
 *
 * @staticvar bool $configured
 * @return bool
 *   Returns TRUE if forms2 settings are configured
 */
function _marketo_rest_forms2_is_configured() {
  static $configured;

  if (!isset($configured)) {
    if (
      variable_get('marketo_rest_munchkin_account_id', FALSE) &&
      variable_get('marketo_rest_instance_host', FALSE)
    ) {
      $configured = TRUE;
    }
    else {
      $configured = FALSE;
    }
  }
  return $configured;
}

/**
 * Tests to see if rest is configured.
 * 
 * @static var bool $configured
 * @return bool
 *   Returns TRUE is REST API settings are configured
 */
function _marketo_rest_rest_is_configured() {
  static $configured;

  if (!isset($configured)) {
    if (
      variable_get('marketo_rest_client_id', FALSE) &&
      variable_get('marketo_rest_client_secret', FALSE) &&
      variable_get('marketo_rest_endpoint', FALSE) &&
      variable_get('marketo_rest_identity', FALSE)
    ) {
      $configured = TRUE;
    }
    else {
      $configured = FALSE;
    }
  }
  return $configured;
}

/**
 * Based on page visibility setting determines if marketo should be included.
 */
function _marketo_rest_visibility_pages() {
  static $page_match;

  // Cache visibility result if function is called more than once.
  if (!isset($page_match)) {
    $visibility = variable_get('marketo_rest_visibility_pages', 0);
    $setting_pages = variable_get('marketo_rest_pages', MARKETO_REST_PAGES);

    // Match path if necessary.
    if (!empty($setting_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = drupal_strtolower($setting_pages);
      if ($visibility < 2) {
        // Convert the Drupal path to lowercase.
        $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
        // Compare the lowercase internal and lowercase path alias (if any).
        $page_match = drupal_match_path($path, $pages);
        if ($path != $_GET['q']) {
          $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
        }
        // When $visibility has a value of 0, the tracking code is displayed on
        // all pages except those listed in $pages. When set to 1, it
        // is displayed only on those pages listed in $pages.
        $page_match = !($visibility xor $page_match);
      }
      elseif (module_exists('php')) {
        $page_match = php_eval($setting_pages);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }
  }
  return $page_match;
}

/**
 * Based on role visibility setting determines if marketo should be included.
 */
function _marketo_rest_visibility_roles($account) {
  static $role_match;

  $enabled = null;
  // Cache visibility result if function is called more than once.
  if (!isset($role_match)) {
    $visibility = variable_get('marketo_rest_visibility_roles', 0);
    $enabled = $visibility;
    $roles = variable_get('marketo_rest_roles', array());

    if (array_sum($roles) > 0) {
      // One or more roles are selected.
      foreach (array_keys($account->roles) as $rid) {
        // Is the current user a member of one of these roles?
        if (isset($roles[$rid]) && $rid == $roles[$rid]) {
          // Current user is a member of a role that should be (in|ex)cluded.
          $enabled = !$visibility;
          break;
        }
      }
    }
    else {
      /*
       * No roles have been selected therefore we will return the visibility
       * setting itself. "Only selected" will be FALSE and "All except" TRUE
       */
      $enabled = $visibility;
    }
  }
  return $enabled;
}

/**
 * Returns SoapClient proxy settings if configured.
 * 
 * @return array
 *   Proxy settings
 */
function _marketo_rest_rest_proxy_settings() {
  static $proxy;

  if (!isset($proxy)) {
    $proxy = array();
    $proxy['proxy_host'] = variable_get('marketo_rest_rest_proxy_host', '');
    $proxy['proxy_port'] = variable_get('marketo_rest_rest_proxy_port', '');
    $proxy['proxy_login'] = variable_get('marketo_rest_rest_proxy_login', '');
    $proxy['proxy_password'] = variable_get('marketo_rest_rest_proxy_password', '');

    if (empty($proxy['proxy_host'])) {
      unset($proxy['proxy_host']);
    }
    if (empty($proxy['proxy_port'])) {
      unset($proxy['proxy_port']);
    }
    if (empty($proxy['proxy_login'])) {
      unset($proxy['proxy_login']);
    }
    if (empty($proxy['proxy_password'])) {
      unset($proxy['proxy_password']);
    }
  }

  return $proxy;
}

/**
 * Save the access token and associated expiry time.
 *
 * @param $access_token
 * @param $expiry
 */
function _marketo_rest_persist_access_token($access_token, $expiry) {
  variable_set('marketo_rest_token', array('access_token' => $access_token, 'expiry' => $expiry));
}
